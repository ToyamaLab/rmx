options {
  STATIC=false;
  MULTI=true;
  VISITOR=true;
  NODE_EXTENDS="BaseNode";
  UNICODE_INPUT=true;
}

PARSER_BEGIN(Parser)

package logic.parse.SOP;

public class Parser {
}

PARSER_END(Parser)


SKIP :
{
  " "
| "\t"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : 
{
     	<MINUS: 	"-" >
    | 	<PLUS: 		"+" >
    | 	<PERIOD:	"." >
    | 	<VERTICAL:	"|" >
    |	<COMMA:		"," >
    | 	<OP_BRACE:	"{" >
    | 	<END_BRACE:	"}" >
    | 	<AT:		"@" >
    | 	<HASH:		"#" >
	| 	<ARG:		(["A"-"Z", "a"-"z", "0"-"9", "%", "\\", "*", "$", "\u3000"-"\u30FF", "\u3400"-"\u9FFF", "\uF900"-"\uFAFF"])+ >

}

ASTRecipient Recipient():
{}
{
	PluginExp() {return jjtThis;}	
}

void PluginExp() #PluginExp(>1) :
{}
{
	Address() | Plugin() (AddExp())? < AT > Domain()
}

void Plugin() :
{}
{
	< HASH > function() < PERIOD > command() ( < PERIOD > CommandTarget() )* < HASH >
}

void CommandTarget() #CommandTarget(>1) :
{}
{
	CommandTargetElement() ( < PLUS > CommandTargetElement() )*
}

void CommandTargetElement() #void :
{}
{
	LOOKAHEAD(2) CommandExp() | CommandPara()
}

void CommandExp() :
{}
{
	commandArg() < OP_BRACE > ( commandArg() ( (< MINUS > | < PERIOD >) commandArg())* )? < END_BRACE >
}

void CommandPara() #CommandPara(>1) :
{}
{
	commandArg() ( < MINUS > commandArg() )*
}

void Address() :
{}
{
	AddExp() < AT > Domain()
}

void Domain():
{}
{
	domainArg() ( < PERIOD > domainArg() )+
}

void AddExp() #void :
{}
{
	MulExp() ( < MINUS > MulExp() #Exception(2) |
	           (< PLUS > | < VERTICAL >) MulExp() #Union(2) )*
}

void MulExp() #void :
{}
{
	Exp() ( < PERIOD > Exp() #Intersection(2) )*	
}

void Exp() :
{}
{
	rule() < OP_BRACE > (ParaList())? < END_BRACE >
}

void ParaList() #ParaList(>1) :
{}
{
	Para() ( < PLUS > Para() |
	         < VERTICAL > Para() )*
}

void Para() #PolymorPara(>1) :
{}
{
	value() ( < MINUS > value() |
	          < PERIOD > value() )*
}

void function() :
{ Token t; }

{
    t=< ARG > { jjtThis.nodeValue = t.image; }
}

void command() :
{ Token t; }

{
    t=< ARG > { jjtThis.nodeValue = t.image; }
}

void commandArg() :
{ Token t; }

{
    t=< ARG > { jjtThis.nodeValue = t.image; }
}

void domainArg() :
{ Token t; }

{
    t=< ARG > { jjtThis.nodeValue = t.image; }
}

void rule() :

{ Token t; }

{
    t=< ARG > { jjtThis.nodeValue = t.image; }
}

void value() :

{ Token t; }

{
    t=< ARG > { jjtThis.nodeValue = t.image; }
}

ASTN_Recipient N_Recipient():
{}
{
	N_PluginExp() {return jjtThis;}	
}

void N_PluginExp() #N_PluginExp(>1) :
{}
{
	N_Address() | Plugin() (N_Paras())? < AT > N_Domain()	
}

void N_Address() :
{}
{
	N_Paras() < AT > N_Domain()
}

void N_Domain():
{}
{
	domainArg() ( < PERIOD > domainArg() )+
}

void N_Paras() :
{}
{
	N_ParaList() ( < PERIOD > N_ParaList() )*
}

void N_ParaList() #N_ParaList(>1) :
{}
{
	N_Para() ( < PLUS > N_Para() |
	         < VERTICAL > N_Para() )*
}

void N_Para() #N_PolymorPara(>1) :
{}
{
	value() ( < MINUS > value() )*
}
